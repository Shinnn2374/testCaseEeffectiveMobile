openapi: 3.0.3
info:
  title: Bank Cards Management API
  description: API для управления банковскими картами, переводами и аутентификации
  version: 1.0.0
  contact:
    email: dev@bank.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080/api
    description: Локальный сервер разработки
  - url: https://api.bank.com/v1
    description: Продакшен сервер

tags:
  - name: Authentication
    description: Регистрация и аутентификация
  - name: Cards
    description: Управление банковскими картами
  - name: Transactions
    description: Операции перевода между картами
  - name: Admin
    description: Администрирование (только для роли ADMIN)

paths:
  /auth/register:
    post:
      tags: [Authentication]
      summary: Регистрация нового пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterRequest'
            example:
              name: "Иван Иванов"
              email: "user@example.com"
              password: "SecurePass123!"
              confirmPassword: "SecurePass123!"
      responses:
        201:
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        400:
          description: Невалидные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Аутентификация пользователя
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
            example:
              email: "user@example.com"
              password: "SecurePass123!"
      responses:
        200:
          description: Успешный вход
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Неверные учетные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cards:
    get:
      tags: [Cards]
      summary: Получить карты пользователя (с пагинацией)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/pageNumber'
        - $ref: '#/components/parameters/pageSize'
      responses:
        200:
          description: Список карт
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardListResponse'
        401:
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags: [Cards]
      summary: Создать новую карту
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CardCreateRequest'
            example:
              ownerName: "IVAN IVANOV"
              expirationDate: "2026-12-31"
              balance: 1000.00
      responses:
        201:
          description: Карта создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        400:
          $ref: '#/components/responses/ValidationError'

  /cards/{id}:
    get:
      tags: [Cards]
      summary: Получить карту по ID
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/cardId'
      responses:
        200:
          description: Данные карты
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardResponse'
        404:
          $ref: '#/components/responses/NotFoundError'

  /transactions:
    post:
      tags: [Transactions]
      summary: Перевод между картами
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              sourceCardId: 1
              targetCardId: 2
              amount: 500.00
      responses:
        200:
          description: Перевод выполнен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        400:
          $ref: '#/components/responses/TransferError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT токен авторизации

  parameters:
    pageNumber:
      name: page
      in: query
      description: Номер страницы (начиная с 0)
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    pageSize:
      name: size
      in: query
      description: Количество элементов на странице
      required: false
      schema:
        type: integer
        default: 10
        minimum: 1
        maximum: 100
    cardId:
      name: id
      in: path
      required: true
      description: ID карты
      schema:
        type: integer
        format: int64
        minimum: 1

  schemas:
    # Auth
    UserRegisterRequest:
      type: object
      required: [name, email, password, confirmPassword]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "Иван Иванов"
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          minLength: 8
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$"
          example: "SecurePass123!"
        confirmPassword:
          type: string
          format: password

    UserLoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          format: password
          example: "SecurePass123!"

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT токен
        expiresIn:
          type: integer
          description: Время жизни токена в миллисекундах
        user:
          $ref: '#/components/schemas/UserProfile'

    UserProfile:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        role:
          type: string
          enum: [USER, ADMIN]

    # Cards
    CardCreateRequest:
      type: object
      required: [ownerName, expirationDate, balance]
      properties:
        ownerName:
          type: string
          example: "IVAN IVANOV"
        expirationDate:
          type: string
          format: date
          example: "2026-12-31"
        balance:
          type: number
          format: double
          minimum: 0
          example: 1000.00

    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        maskedNumber:
          type: string
          example: "**** **** **** 1234"
        ownerName:
          type: string
        expirationDate:
          type: string
          format: date
        status:
          type: string
          enum: [ACTIVE, BLOCKED, EXPIRED]
        balance:
          type: number
          format: double
        createdAt:
          type: string
          format: date-time

    CardListResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CardResponse'
        totalPages:
          type: integer
        totalElements:
          type: integer
        pageNumber:
          type: integer

    # Transactions
    TransactionRequest:
      type: object
      required: [sourceCardId, targetCardId, amount]
      properties:
        sourceCardId:
          type: integer
          format: int64
          minimum: 1
          example: 1
        targetCardId:
          type: integer
          format: int64
          minimum: 1
          example: 2
        amount:
          type: number
          format: double
          minimum: 0.01
          example: 500.00

    TransactionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        sourceCardId:
          type: integer
        targetCardId:
          type: integer
        amount:
          type: number
        timestamp:
          type: string
          format: date-time

    # Errors
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "BAD_REQUEST"
        message:
          type: string
          example: "Validation failed"
        timestamp:
          type: string
          format: date-time
        errors:
          type: array
          items:
            type: string
          example: ["Password must contain at least 1 digit"]

  responses:
    UnauthorizedError:
      description: Не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "UNAUTHORIZED"
            message: "Full authentication is required"
            timestamp: "2025-08-06T12:00:00Z"

    NotFoundError:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "NOT_FOUND"
            message: "Card not found with id: 999"
            timestamp: "2025-08-06T12:00:00Z"

    ValidationError:
      description: Ошибка валидации
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "BAD_REQUEST"
            message: "Validation failed"
            timestamp: "2025-08-06T12:00:00Z"
            errors: ["Expiration date must be in the future"]

    TransferError:
      description: Ошибка перевода
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            status: "BAD_REQUEST"
            message: "Insufficient funds"
            timestamp: "2025-08-06T12:00:00Z"